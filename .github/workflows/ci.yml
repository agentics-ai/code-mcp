name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: 10.10.0

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Show repo root files (debug)
      run: ls -l

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm@${{ env.PNPM_VERSION }}

    - name: Verify pnpm installation
      run: pnpm --version

    - name: Verify pnpm-lock.yaml presence
      run: |
        if [ ! -f pnpm-lock.yaml ]; then
          echo "pnpm-lock.yaml NOT FOUND!"
          exit 1
        fi

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check TypeScript compilation
      run: pnpm run build

    - name: Validate package.json
      run: |
        echo "Validating package.json structure..."
        node -e "
          const pkg = require('./package.json');
          if (!pkg.name || !pkg.version || !pkg.description) {
            throw new Error('Missing required package.json fields');
          }
          console.log('✅ Package.json validation passed');
        "

    - name: Check for secrets in code
      run: |
        echo "Checking for potential secrets..."
        if grep -r -i "password\|secret\|token\|key" src/ --include="*.ts" --include="*.js" | grep -v "// OK:" | head -5; then
          echo "⚠️ Found potential secrets in code. Please review."
          echo "Add // OK: comment after the line if it's intentional"
        else
          echo "✅ No potential secrets found"
        fi

  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: [validate]
    if: always() && (needs.validate.result == 'success' || github.event_name == 'push')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Show repo root files (debug)
      run: ls -l

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm@${{ env.PNPM_VERSION }}

    - name: Verify pnpm installation
      run: pnpm --version

    - name: Verify pnpm-lock.yaml presence
      run: |
        if [ ! -f pnpm-lock.yaml ]; then
          echo "pnpm-lock.yaml NOT FOUND!"
          exit 1
        fi

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Setup Python for tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pytest and Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov

    - name: Build project
      run: pnpm run build

    - name: Run tests with coverage
      run: pnpm run test:ci

    - name: Run Python tests (if any)
      run: |
        if [ -f "demo/python_execution_test.py" ]; then
          echo "Running Python execution test..."
          python demo/python_execution_test.py
        fi
        if [ -d "tests" ] && find tests -name "*.py" -type f | grep -q .; then
          echo "Running pytest..."
          pytest tests/ -v
        else
          echo "No Python test files found"
        fi
      continue-on-error: true

    - name: Upload coverage to CodeCov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml
        retention-days: 30

  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Show repo root files (debug)
      run: ls -l

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm@${{ env.PNPM_VERSION }}

    - name: Verify pnpm installation
      run: pnpm --version

    - name: Verify pnpm-lock.yaml presence
      run: |
        if [ ! -f pnpm-lock.yaml ]; then
          echo "pnpm-lock.yaml NOT FOUND!"
          exit 1
        fi

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit --audit-level moderate
      continue-on-error: true

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        pnpm outdated || echo "Some dependencies are outdated"

    - name: Dependency vulnerability scan
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Show repo root files (debug)
      run: ls -l

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: vscode-mcp-server:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm vscode-mcp-server:test --version || echo "Docker test completed"

  demo:
    name: Demo & Integration
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Show repo root files (debug)
      run: ls -l

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install pnpm
      run: npm install -g pnpm@${{ env.PNPM_VERSION }}

    - name: Verify pnpm installation
      run: pnpm --version

    - name: Verify pnpm-lock.yaml presence
      run: |
        if [ ! -f pnpm-lock.yaml ]; then
          echo "pnpm-lock.yaml NOT FOUND!"
          exit 1
        fi

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: dist/

    - name: Setup Python for demo tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pytest and Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov

    - name: Run demo script
      run: pnpm run demo
      continue-on-error: true

    - name: Run Python tests (if any)
      run: |
        if [ -f "demo/python_execution_test.py" ]; then
          echo "Running Python execution test..."
          python demo/python_execution_test.py
        fi
        if [ -d "tests" ] && find tests -name "*.py" -type f | grep -q .; then
          echo "Running pytest..."
          pytest tests/ -v
        else
          echo "No Python test files found"
        fi
      continue-on-error: true

    - name: Archive demo results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: demo-results
        path: |
          mcp_demo_report.json
          demo/
        retention-days: 7

  pr-status:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [validate, build, security, docker]
    if: always() && github.event_name == 'pull_request'
    steps:
    - name: Check all jobs status
      run: |
        echo "Validation: ${{ needs.validate.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        if [[ "${{ needs.validate.result }}" != "success" ]]; then
          echo "❌ Validation failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "❌ Build failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" == "failure" ]]; then
          echo "❌ Security checks failed"
          exit 1
        fi
        if [[ "${{ needs.docker.result }}" == "failure" ]]; then
          echo "❌ Docker build failed"
          exit 1
        fi
        echo "✅ All required checks passed!"

    - name: Comment PR status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const { needs } = context.payload;
          const success = needs.validate.result === 'success' && 
                         needs.build.result === 'success';
          const message = success 
            ? '✅ **All CI checks passed!** This PR is ready for review.' 
            : '❌ **CI checks failed.** Please fix the issues before review.';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
